; ModuleID = 'stream.bc'
source_filename = "/home/gem-forge-framework/transform/benchmark/GemForgeMicroSuite/omp_va_cond/omp_va_cond.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ident_t = type { i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@0 = private unnamed_addr constant [120 x i8] c";/home/gem-forge-framework/transform/benchmark/GemForgeMicroSuite/omp_va_cond/omp_va_cond.c;vector_addition_host;34;3;;\00", align 1
@1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @0, i32 0, i32 0) }, align 8
@2 = private unnamed_addr constant [121 x i8] c";/home/gem-forge-framework/transform/benchmark/GemForgeMicroSuite/omp_va_cond/omp_va_cond.c;vector_addition_host;34;90;;\00", align 1
@3 = private unnamed_addr constant %struct.ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @2, i32 0, i32 0) }, align 8
@4 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @0, i32 0, i32 0) }, align 8
@.str = private unnamed_addr constant [24 x i8] c"Number of Threads: %d.\0A\00", align 1

; Function Attrs: nounwind uwtable
define dso_local noalias i8* @LOAD_BIN_ARRAY_FROM_FILE(i64* nocapture %arg, %struct._IO_FILE* nocapture %arg1) local_unnamed_addr #0 !dbg !7 {
bb:
  %i = alloca i64, align 8
  %i2 = bitcast i64* %i to i8*, !dbg !10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %i2) #5, !dbg !10
  %i3 = call i64 @fread(i8* nonnull %i2, i64 8, i64 1, %struct._IO_FILE* %arg1), !dbg !11
  %i4 = load i64, i64* %i, align 8, !dbg !12, !tbaa !13
  %i5 = call noalias i8* @aligned_alloc(i64 4096, i64 %i4) #5, !dbg !17
  %i6 = call i64 @fread(i8* %i5, i64 1, i64 %i4, %struct._IO_FILE* %arg1), !dbg !18
  store i64 %i4, i64* %arg, align 8, !dbg !19, !tbaa !13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %i2) #5, !dbg !20
  ret i8* %i5, !dbg !21
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noundef i64 @fread(i8* nocapture noundef, i64 noundef, i64 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @aligned_alloc(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @vector_addition_host(i32* %arg, i32* %arg1, i32* %arg2, i64* %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr #3 !dbg !22 { // SJ: args (&A, &B, &C, index_queue, visited, numThreads)
bb:
  %i = alloca i64*, align 8
  %i6 = alloca i32*, align 8
  store i64* %arg3, i64** %i, align 8, !tbaa !24
  store i32* %arg4, i32** %i6, align 8, !tbaa !24
  %i7 = sext i32 %arg5 to i64, !dbg !26
  %i8 = udiv i64 2560000, %i7, !dbg !27
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @4, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64**, i32*, i32*, i32*, i32**, i64)* @.omp_outlined. to void (i32*, i32*, ...)*), i64** nonnull %i, i32* %arg2, i32* %arg, i32* %arg1, i32** nonnull %i6, i64 %i8), !dbg !28
  ret i32 0, !dbg !29
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly %arg, i32* noalias nocapture readnone %arg1, i64** nocapture nonnull readonly align 8 dereferenceable(8) %arg2, i32* nocapture %arg3, i32* nocapture readonly %arg4, i32* nocapture readonly %arg5, i32** nocapture nonnull readonly align 8 dereferenceable(8) %arg6, i64 %arg7) #4 !dbg !30 { // SJ: args (arg?, arg1?, &index_queue[0], &C[0], &A[0], &B[0], &visited[0], 2560000 / numThreads) 
bb:
  %i = alloca i64, align 8 // SJ: outer_loop iter
  %i8 = alloca i64, align 8
  %i9 = alloca i64, align 8
  %i10 = alloca i32, align 4
  %i11 = bitcast i64* %i to i8*, !dbg !31
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %i11) #5, !dbg !31
  store i64 0, i64* %i, align 8, !dbg !32, !tbaa !13
  %i12 = bitcast i64* %i8 to i8*, !dbg !31
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %i12) #5, !dbg !31
  store i64 49, i64* %i8, align 8, !dbg !32, !tbaa !13
  %i13 = bitcast i64* %i9 to i8*, !dbg !31
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %i13) #5, !dbg !31
  store i64 1, i64* %i9, align 8, !dbg !32, !tbaa !13
  %i14 = bitcast i32* %i10 to i8*, !dbg !31
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %i14) #5, !dbg !31
  store i32 0, i32* %i10, align 4, !dbg !32, !tbaa !33
  %i15 = load i32, i32* %arg, align 4, !dbg !31, !tbaa !33
  call void @__kmpc_for_static_init_8u(%struct.ident_t* nonnull @1, i32 %i15, i32 33, i32* nonnull %i10, i64* nonnull %i, i64* nonnull %i8, i64* nonnull %i9, i64 1, i64 %arg7) #5, !dbg !31
  %i16 = load i64, i64* %i8, align 8, !dbg !32, !tbaa !13
  %i17 = icmp ult i64 %i16, 49, !dbg !32
  %i18 = select i1 %i17, i64 %i16, i64 49, !dbg !32 // SJ: last iter (i = 49)
  store i64 %i18, i64* %i8, align 8, !dbg !32, !tbaa !13
  %i19 = load i64, i64* %i, align 8, !dbg !32, !tbaa !13 // SJ: Current iter (i = 0)
  %i20 = icmp ugt i64 %i19, %i18, !dbg !35 // SJ: current_iter > 49
  br i1 %i20, label %bb54, label %bb21, !dbg !31 // SJ: False

bb21:                                             ; preds = %bb
  %i22 = load i64*, i64** %arg2, align 8, !dbg !36 // SJ: &index_queue[i * num_leaf]
  %i23 = load i32*, i32** %arg6, align 8, !dbg !36 // SJ: &visited[0] 
  %i24 = load i64, i64* %i9, align 8, !dbg !36, !tbaa !13 // SJ: 1 (= outer_loop stride)
  call void @llvm.ssp.stream.config(i64 0), !dbg !31
  call void @llvm.ssp.stream.input.i64(i64 3, i64 %i24), !dbg !31 // SJ: %i24 = outer loop stride 
  call void @llvm.ssp.stream.input.i64(i64 3, i64 %i19), !dbg !31 // SJ: %i19 = outer loop current iter (i = 0) 
  call void @llvm.ssp.stream.ready(), !dbg !31
  %0 = sub i64 1, %i19, !dbg !31 // SJ: 1 - %19 (= 1)
  %1 = sub i64 0, %i24, !dbg !35 // SJ: -%i24 (= -1)
  br label %bb25, !dbg !31

bb25:                                             ; preds = %bb48, %bb21
  %indvar = phi i64 [ %indvar.next, %bb48 ], [ 0, %bb21 ] // SJ: Same variable in below (%i26) // SJ: Current outer_iter (i), if prev_block == %bb21 (i = 0), %indvar = 0 | else, %indvar += 1
  %i26 = phi i64 [ %i19, %bb21 ], [ %i49, %bb48 ] // SJ: Current outer_iter (i), if prev_block == %bb21 (i = 0), %i26 = 0 | else, %i26 = %i49 (= i) 
  %i27 = phi i64 [ %i18, %bb21 ], [ %i52, %bb48 ] // SJ: Last outer_iter (49), if prev_block == %bb21 (i = 0), %i27 = last_iter (%i18 = num_leaf - 1) | else, %i27 = %i52 (= num_leaf - 1)
  %2 = mul i64 %1, %indvar, !dbg !35 // SJ: -%indvar
  %3 = add i64 %0, %2, !dbg !35 // SJ: 1 - %indvar
  %4 = mul i64 %i24, %indvar, !dbg !35 // SJ: %indvar
  %5 = add i64 %i19, %4, !dbg !35 // SJ: %indvar
  %scevgep = getelementptr i64, i64* %i22, i64 %5, !dbg !35 // SJ: $scevgep = &index_queue[i (SJ: i in outer vector_addition_host) * num_leaf + i]
  %i28 = icmp ugt i64 %i26, %i27, !dbg !35 // SJ: true if current iter > num_leaf 
  br i1 %i28, label %bb48, label %bb29.preheader, !dbg !31 // Enter for loop & configure streams

bb29.preheader:                                   ; preds = %bb25 // SJ: This is called for every outer_loop in vector_addition_host
  call void @llvm.ssp.stream.config(i64 1), !dbg !31
  %6 = add i64 %i27, %3, !dbg !31 // SJ: num_leaf - %indvar 
  call void @llvm.ssp.stream.input.i64(i64 4, i64 %6), !dbg !31 // SJ: %6 = remain_iter (num_leaf)
  call void @llvm.ssp.stream.input.i64(i64 4, i64 %5), !dbg !31 // SJ: %5 = current_iter (0)
  call void @llvm.ssp.stream.input.i64(i64 5, i64 %6), !dbg !31 // SJ: %6 = remain_iter
  call void @llvm.ssp.stream.input.i64(i64 6, i64 %6), !dbg !31 // SJ: %6 = remain_iter (length of 
  call void @llvm.ssp.stream.input.p0i64(i64 6, i64* %scevgep), !dbg !31 // SJ: &index_queue[i * num_leaf + i]
  call void @llvm.ssp.stream.input.p0i32(i64 7, i32* %arg4), !dbg !31 // SJ: &A
  call void @llvm.ssp.stream.input.p0i32(i64 8, i32* %arg5), !dbg !31 // SJ: &B
  call void @llvm.ssp.stream.input.p0i32(i64 9, i32* %arg3), !dbg !31 // SJ: &C
  call void @llvm.ssp.stream.input.p0i32(i64 10, i32* %i23), !dbg !31 // SJ: &visited
  call void @llvm.ssp.stream.ready(), !dbg !31
  br label %bb29, !dbg !31

bb29:                                             ; preds = %bb33, %bb29.preheader
  %i30 = phi i64 [ %i35, %bb33 ], [ %i26, %bb29.preheader ]
  %7 = call i64 @llvm.ssp.stream.load.i64(i64 6), !dbg !37 // SJ: uint64_t idx = *index_queue[i * num_leaf]
  br label %bb37, !dbg !38

bb33:                                             ; preds = %bb37
  %i34 = getelementptr inbounds i32, i32* %i23, i64 %7, !dbg !39 // SJ: &visited[idx]
  store i32 1, i32* %i34, align 4, !dbg !40, !tbaa !33 // SJ: visited[idx] = true
  %i35 = add i64 %i30, 1, !dbg !35 // SJ: i++
  %i36 = icmp ugt i64 %i35, %i27, !dbg !35 // SJ: i + 1 > num_leaf
  call void @llvm.ssp.stream.step(i64 4), !dbg !31 // SJ: step index_queue (loop i)
  br i1 %i36, label %bb48.loopexit, label %bb29, !dbg !31, !llvm.loop !41

bb37:                                             ; preds = %bb37, %bb29
  %i38 = phi i64 [ 0, %bb29 ], [ %i46, %bb37 ]
  %i39 = add i64 %i38, %7, !dbg !43 // SJ: idx + j
  %8 = call i64 @llvm.ssp.stream.load.i64(i64 7), !dbg !44
  %9 = trunc i64 %8 to i32, !dbg !44
  %10 = call i64 @llvm.ssp.stream.load.i64(i64 8), !dbg !45
  %11 = trunc i64 %10 to i32, !dbg !45
  %i44 = add i32 %11, %9, !dbg !46 // SJ: A[idx + j] + B[idx + j]
  %i45 = getelementptr inbounds i32, i32* %arg3, i64 %i39, !dbg !47 // SJ: &C[idx + j]
  store i32 %i44, i32* %i45, align 4, !dbg !48, !tbaa !33 // SJ: C[idx + j] = A[idx + j] + B[idx + j]
  %i46 = add nuw nsw i64 %i38, 1, !dbg !49 // SJ: idx++
  %i47 = icmp eq i64 %i46, 256, !dbg !50 // SJ: j < dim_vector
  call void @llvm.ssp.stream.step(i64 5), !dbg !38 // SJ: step A, B (loop j)
  br i1 %i47, label %bb33, label %bb37, !dbg !38, !llvm.loop !51

bb48.loopexit:                                    ; preds = %bb33
  call void @llvm.ssp.stream.end(i64 1), !dbg !35
  br label %bb48, !dbg !35

bb48:                                             ; preds = %bb48.loopexit, %bb25
  %i49 = add i64 %i24, %i26, !dbg !35 // SJ: outer_loop i++
  store i64 %i49, i64* %i, align 8, !dbg !35, !tbaa !13
  %i50 = add i64 %i24, %i27, !dbg !35 // SJ: num_leaf -> 50
  %i51 = icmp ult i64 %i50, 49, !dbg !32 // SJ: num_leaf < 49 -> always false
  %i52 = select i1 %i51, i64 %i50, i64 49, !dbg !32 // SJ: 49
  store i64 %i52, i64* %i8, align 8, !dbg !32, !tbaa !13 // SJ: %i8 = 49
  %i53 = icmp ugt i64 %i49, %i52, !dbg !35 // SJ: i > 49
  call void @llvm.ssp.stream.step(i64 3), !dbg !31 // SJ: step outer_loop
  %indvar.next = add i64 %indvar, 1, !dbg !31 // SJ: %indvar.next = %indvar + 1
  br i1 %i53, label %bb54.loopexit, label %bb25, !dbg !31, !llvm.loop !54

bb54.loopexit:                                    ; preds = %bb48
  call void @llvm.ssp.stream.end(i64 0), !dbg !42
  br label %bb54, !dbg !42

bb54:                                             ; preds = %bb54.loopexit, %bb
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @3, i32 %i15), !dbg !42
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %i14) #5, !dbg !31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %i13) #5, !dbg !31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %i12) #5, !dbg !31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %i11) #5, !dbg !31
  ret void, !dbg !55
}

declare dso_local void @__kmpc_for_static_init_8u(%struct.ident_t*, i32, i32, i32*, i64*, i64*, i64*, i64, i64) local_unnamed_addr

; Function Attrs: nounwind
declare void @__kmpc_for_static_fini(%struct.ident_t*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @__kmpc_fork_call(%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr #5

; Function Attrs: noreturn nounwind uwtable
define dso_local i32 @main(i32 %arg, i8** nocapture readonly %arg1) local_unnamed_addr #6 !dbg !56 {
bb:
  %i = icmp eq i32 %arg, 2, !dbg !57
  br i1 %i, label %bb2, label %bb6, !dbg !58

bb2:                                              ; preds = %bb
  %i3 = getelementptr inbounds i8*, i8** %arg1, i64 1, !dbg !59
  %i4 = load i8*, i8** %i3, align 8, !dbg !59, !tbaa !24
  %i5 = call i32 @atoi(i8* %i4) #13, !dbg !60
  br label %bb6, !dbg !61

bb6:                                              ; preds = %bb2, %bb
  %i7 = phi i32 [ %i5, %bb2 ], [ 1, %bb ], !dbg !62
  %i8 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i32 %i7), !dbg !63
  call void @omp_set_dynamic(i32 0) #5, !dbg !64
  call void @omp_set_num_threads(i32 %i7) #5, !dbg !65
  call void @omp_set_schedule(i32 1, i32 0) #5, !dbg !66
  call void @srand(i32 0) #5, !dbg !67
  %i9 = call noalias align 64 dereferenceable_or_null(10240000) i8* @aligned_alloc(i64 64, i64 10240000) #5, !dbg !68
  %i10 = call noalias align 64 dereferenceable_or_null(10240000) i8* @aligned_alloc(i64 64, i64 10240000) #5, !dbg !69
  %i11 = call noalias align 64 dereferenceable_or_null(10240000) i8* @aligned_alloc(i64 64, i64 10240000) #5, !dbg !70
  %i12 = call noalias align 64 dereferenceable_or_null(4000) i8* @aligned_alloc(i64 64, i64 4000) #5, !dbg !71
  %i13 = bitcast i8* %i12 to i64*, !dbg !72
  br label %bb20, !dbg !73

bb14:                                             ; preds = %bb20
  %i15 = bitcast i8* %i9 to i32*, !dbg !74
  %i16 = bitcast i8* %i10 to i32*, !dbg !75
  %i17 = bitcast i8* %i11 to i32*, !dbg !76
  %i18 = call noalias dereferenceable_or_null(10240000) i8* @malloc(i64 10240000) #5, !dbg !77
  %i19 = bitcast i8* %i18 to i32*, !dbg !78
  br label %bb29, !dbg !79

bb20:                                             ; preds = %bb20, %bb6
  %i21 = phi i64 [ 0, %bb6 ], [ %i26, %bb20 ]
  %i22 = call i32 @rand() #5, !dbg !80
  %i23 = sext i32 %i22 to i64, !dbg !80
  %i24 = udiv i64 %i23, 10000, !dbg !81
  %i25 = getelementptr inbounds i64, i64* %i13, i64 %i21, !dbg !82
  store i64 %i24, i64* %i25, align 8, !dbg !83, !tbaa !13
  %i26 = add nuw nsw i64 %i21, 1, !dbg !84
  %i27 = icmp eq i64 %i26, 500, !dbg !85
  br i1 %i27, label %bb14, label %bb20, !dbg !73, !llvm.loop !86

bb28:                                             ; preds = %bb29
  call void @m5_switch_cpu() #5, !dbg !88
  call void @m5_reset_stats(i64 0, i64 0) #5, !dbg !89
  br label %bb37, !dbg !90

bb29:                                             ; preds = %bb29, %bb14
  %i30 = phi i64 [ 0, %bb14 ], [ %i34, %bb29 ]
  %i31 = trunc i64 %i30 to i32, !dbg !91
  %i32 = and i32 %i31, 3, !dbg !91
  %i33 = getelementptr inbounds i32, i32* %i19, i64 %i30, !dbg !92
  store i32 %i32, i32* %i33, align 4, !dbg !93, !tbaa !33
  %i34 = add nuw nsw i64 %i30, 1, !dbg !94
  %i35 = icmp eq i64 %i34, 2560000, !dbg !95
  br i1 %i35, label %bb28, label %bb29, !dbg !79, !llvm.loop !96

bb36:                                             ; preds = %bb37
  call void @m5_dump_stats(i64 0, i64 0) #5, !dbg !98
  call void @exit(i32 0) #14, !dbg !99
  unreachable, !dbg !99

bb37:                                             ; preds = %bb37, %bb28
  %i38 = phi i64 [ 0, %bb28 ], [ %i42, %bb37 ]
  %i39 = phi i64* [ %i13, %bb28 ], [ %i41, %bb37 ]
  %i40 = call i32 @vector_addition_host(i32* %i15, i32* %i16, i32* %i17, i64* %i39, i32* %i19, i32 %i7), !dbg !100 // SJ: args (A, B, C, index_queue, visited, numThreads)
  %i41 = getelementptr inbounds i64, i64* %i39, i64 50, !dbg !101
  %i42 = add nuw nsw i64 %i38, 1, !dbg !102
  %i43 = icmp eq i64 %i42, 10, !dbg !103
  br i1 %i43, label %bb36, label %bb37, !dbg !90, !llvm.loop !104
}

; Function Attrs: inlinehint nounwind readonly uwtable
define available_externally dso_local i32 @atoi(i8* nonnull %arg) local_unnamed_addr #7 !dbg !106 {
bb:
  %i = call i64 @strtol(i8* nocapture nonnull %arg, i8** null, i32 10) #5, !dbg !108
  %i1 = trunc i64 %i to i32, !dbg !109
  ret i32 %i1, !dbg !110
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

declare dso_local void @omp_set_dynamic(i32) local_unnamed_addr #8

declare dso_local void @omp_set_num_threads(i32) local_unnamed_addr #8

declare dso_local void @omp_set_schedule(i32, i32) local_unnamed_addr #8

; Function Attrs: nounwind
declare dso_local void @srand(i32) local_unnamed_addr #9

; Function Attrs: nounwind
declare dso_local i32 @rand() local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #2

declare dso_local void @m5_switch_cpu() local_unnamed_addr #8

declare dso_local void @m5_reset_stats(i64, i64) local_unnamed_addr #8

declare dso_local void @m5_dump_stats(i64, i64) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) local_unnamed_addr #10

; Function Attrs: nofree nounwind
declare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

; Function Attrs: nounwind willreturn
declare i64 @llvm.ssp.stream.load.i64(i64) #11

; Function Attrs: nounwind willreturn
declare void @llvm.ssp.stream.step(i64) #11

; Function Attrs: nounwind willreturn
declare void @llvm.ssp.stream.config(i64) #11

; Function Attrs: nounwind willreturn
declare void @llvm.ssp.stream.input.i64(i64, i64) #11

; Function Attrs: nounwind willreturn
declare void @llvm.ssp.stream.ready() #11

; Function Attrs: nounwind willreturn
declare void @llvm.ssp.stream.end(i64) #11

; Function Attrs: nounwind willreturn
declare void @llvm.ssp.stream.input.p0i64(i64, i64*) #11

; Function Attrs: nounwind willreturn
declare void @llvm.ssp.stream.input.p0i32(i64, i32*) #11

define x86_64_sysvcc i32* @.omp_outlined._bb37__store_8_addr(i64 %0, i64 %1, i32* %2) #12 {
entry:
  %i39 = add i64 %1, %0, !dbg !43
  %i45 = getelementptr inbounds i32, i32* %2, i64 %i39, !dbg !47
  ret i32* %i45
}

define x86_64_sysvcc i64* @.omp_outlined._bb29_i32_load_2_addr(i64 %0, i64* %1) #12 {
entry:
  %i31 = getelementptr inbounds i64, i64* %1, i64 %0, !dbg !111
  ret i64* %i31
}

define x86_64_sysvcc i32* @.omp_outlined._bb37_i41_load_3_addr(i64 %0, i64 %1, i32* %2) #12 {
entry:
  %i39 = add i64 %1, %0, !dbg !43
  %i40 = getelementptr inbounds i32, i32* %2, i64 %i39, !dbg !44
  ret i32* %i40
}

define x86_64_sysvcc i32* @.omp_outlined._bb37_i43_load_5_addr(i64 %0, i64 %1, i32* %2) #12 {
entry:
  %i39 = add i64 %0, %1, !dbg !43
  %i42 = getelementptr inbounds i32, i32* %2, i64 %i39, !dbg !45
  ret i32* %i42
}

define x86_64_sysvcc i32* @.omp_outlined._bb33__store_1_addr(i64 %0, i32* %1) #12 {
entry:
  %i34 = getelementptr inbounds i32, i32* %1, i64 %0, !dbg !39
  ret i32* %i34
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind willreturn }
attributes #12 = { "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 12.0.0 (https://github.com/SNU-ARC/gem-forge-llvm 21fb5b617c4146f19c1f20259d3fc4792a84bde3)", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/gem-forge-framework/transform/benchmark/GemForgeMicroSuite/omp_va_cond/omp_va_cond.c", directory: "/home/gem-forge-framework/example_1x1")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 12.0.0 (https://github.com/SNU-ARC/gem-forge-llvm 21fb5b617c4146f19c1f20259d3fc4792a84bde3)"}
!7 = distinct !DISubprogram(name: "LOAD_BIN_ARRAY_FROM_FILE", scope: !8, file: !8, line: 28, type: !9, scopeLine: 28, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!8 = !DIFile(filename: "transform/benchmark/GemForgeMicroSuite/omp_va_cond/../gfm_utils.h", directory: "/home/gem-forge-framework")
!9 = !DISubroutineType(types: !2)
!10 = !DILocation(line: 29, column: 3, scope: !7)
!11 = !DILocation(line: 30, column: 3, scope: !7)
!12 = !DILocation(line: 31, column: 57, scope: !7)
!13 = !{!14, !14, i64 0}
!14 = !{!"long", !15, i64 0}
!15 = !{!"omnipotent char", !16, i64 0}
!16 = !{!"Simple C/C++ TBAA"}
!17 = !DILocation(line: 31, column: 32, scope: !7)
!18 = !DILocation(line: 32, column: 3, scope: !7)
!19 = !DILocation(line: 33, column: 9, scope: !7)
!20 = !DILocation(line: 35, column: 1, scope: !7)
!21 = !DILocation(line: 34, column: 3, scope: !7)
!22 = distinct !DISubprogram(name: "vector_addition_host", scope: !23, file: !23, line: 33, type: !9, scopeLine: 33, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!23 = !DIFile(filename: "transform/benchmark/GemForgeMicroSuite/omp_va_cond/omp_va_cond.c", directory: "/home/gem-forge-framework")
!24 = !{!25, !25, i64 0}
!25 = !{!"any pointer", !15, i64 0}
!26 = !DILocation(line: 34, column: 57, scope: !22)
!27 = !DILocation(line: 34, column: 55, scope: !22)
!28 = !DILocation(line: 34, column: 3, scope: !22)
!29 = !DILocation(line: 43, column: 3, scope: !22)
!30 = distinct !DISubprogram(name: ".omp_outlined.", scope: !23, file: !23, line: 34, type: !9, scopeLine: 34, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!31 = !DILocation(line: 34, column: 3, scope: !30)
!32 = !DILocation(line: 35, column: 8, scope: !30)
!33 = !{!34, !34, i64 0}
!34 = !{!"int", !15, i64 0}
!35 = !DILocation(line: 35, column: 3, scope: !30)
!36 = !DILocation(line: 0, scope: !30)
!37 = !DILocation(line: 36, column: 20, scope: !30)
!38 = !DILocation(line: 38, column: 5, scope: !30)
!39 = !DILocation(line: 41, column: 5, scope: !30)
!40 = !DILocation(line: 41, column: 18, scope: !30)
!41 = distinct !{!41, !31, !42}
!42 = !DILocation(line: 34, column: 90, scope: !30)
!43 = !DILocation(line: 39, column: 26, scope: !30)
!44 = !DILocation(line: 39, column: 20, scope: !30)
!45 = !DILocation(line: 39, column: 33, scope: !30)
!46 = !DILocation(line: 39, column: 31, scope: !30)
!47 = !DILocation(line: 39, column: 7, scope: !30)
!48 = !DILocation(line: 39, column: 18, scope: !30)
!49 = !DILocation(line: 38, column: 43, scope: !30)
!50 = !DILocation(line: 38, column: 28, scope: !30)
!51 = distinct !{!51, !38, !52, !53}
!52 = !DILocation(line: 40, column: 5, scope: !30)
!53 = !{!"llvm.loop.unroll.disable"}
!54 = distinct !{!54, !31, !42}
!55 = !DILocation(line: 42, column: 3, scope: !30)
!56 = distinct !DISubprogram(name: "main", scope: !23, file: !23, line: 46, type: !9, scopeLine: 46, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!57 = !DILocation(line: 49, column: 12, scope: !56)
!58 = !DILocation(line: 49, column: 7, scope: !56)
!59 = !DILocation(line: 50, column: 23, scope: !56)
!60 = !DILocation(line: 50, column: 18, scope: !56)
!61 = !DILocation(line: 51, column: 3, scope: !56)
!62 = !DILocation(line: 0, scope: !56)
!63 = !DILocation(line: 52, column: 3, scope: !56)
!64 = !DILocation(line: 53, column: 3, scope: !56)
!65 = !DILocation(line: 54, column: 3, scope: !56)
!66 = !DILocation(line: 55, column: 3, scope: !56)
!67 = !DILocation(line: 56, column: 3, scope: !56)
!68 = !DILocation(line: 59, column: 23, scope: !56)
!69 = !DILocation(line: 60, column: 23, scope: !56)
!70 = !DILocation(line: 61, column: 23, scope: !56)
!71 = !DILocation(line: 62, column: 39, scope: !56)
!72 = !DILocation(line: 62, column: 27, scope: !56)
!73 = !DILocation(line: 63, column: 3, scope: !56)
!74 = !DILocation(line: 59, column: 14, scope: !56)
!75 = !DILocation(line: 60, column: 14, scope: !56)
!76 = !DILocation(line: 61, column: 14, scope: !56)
!77 = !DILocation(line: 65, column: 35, scope: !56)
!78 = !DILocation(line: 65, column: 23, scope: !56)
!79 = !DILocation(line: 66, column: 3, scope: !56)
!80 = !DILocation(line: 64, column: 22, scope: !56)
!81 = !DILocation(line: 64, column: 29, scope: !56)
!82 = !DILocation(line: 64, column: 5, scope: !56)
!83 = !DILocation(line: 64, column: 20, scope: !56)
!84 = !DILocation(line: 63, column: 50, scope: !56)
!85 = !DILocation(line: 63, column: 26, scope: !56)
!86 = distinct !{!86, !73, !87, !53}
!87 = !DILocation(line: 64, column: 31, scope: !56)
!88 = !DILocation(line: 70, column: 3, scope: !56)
!89 = !DILocation(line: 85, column: 3, scope: !56)
!90 = !DILocation(line: 88, column: 3, scope: !56)
!91 = !DILocation(line: 67, column: 18, scope: !56)
!92 = !DILocation(line: 67, column: 5, scope: !56)
!93 = !DILocation(line: 67, column: 16, scope: !56)
!94 = !DILocation(line: 66, column: 40, scope: !56)
!95 = !DILocation(line: 66, column: 26, scope: !56)
!96 = distinct !{!96, !79, !97, !53}
!97 = !DILocation(line: 67, column: 22, scope: !56)
!98 = !DILocation(line: 104, column: 3, scope: !56)
!99 = !DILocation(line: 105, column: 3, scope: !56)
!100 = !DILocation(line: 89, column: 5, scope: !56)
!101 = !DILocation(line: 90, column: 17, scope: !56)
!102 = !DILocation(line: 88, column: 39, scope: !56)
!103 = !DILocation(line: 88, column: 26, scope: !56)
!104 = distinct !{!104, !90, !105, !53}
!105 = !DILocation(line: 91, column: 3, scope: !56)
!106 = distinct !DISubprogram(name: "atoi", scope: !107, file: !107, line: 361, type: !9, scopeLine: 362, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!107 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!108 = !DILocation(line: 363, column: 16, scope: !106)
!109 = !DILocation(line: 363, column: 10, scope: !106)
!110 = !DILocation(line: 363, column: 3, scope: !106)
!111 = !DILocation(line: 36, column: 34, scope: !30)
